---
description: Morphic provides a rich set of UI components built with React, TypeScript, and Tailwind CSS. These components are designed to work seamlessly with AI-generated content and can be used by Daydreams agents to create dynamic interfaces.
globs: 
alwaysApply: false
---
# Morphic UI Components

## Overview

Morphic provides a rich set of UI components built with React, TypeScript, and Tailwind CSS. These components are designed to work seamlessly with AI-generated content and can be used by Daydreams agents to create dynamic interfaces.

## Core UI Components

### 1. Search Interface
- **File**: [components/search-form.tsx](mdc:components/search-form.tsx)
- **Purpose**: Main search input with mode selection
- **Features**:
  - Search query input
  - Mode toggle (web/academic/writing/etc.)
  - Voice input support
  - Search history

### 2. Answer Component
- **File**: [components/answer.tsx](mdc:components/answer.tsx)
- **Purpose**: Displays AI-generated answers with citations
- **Features**:
  - Markdown rendering
  - Citation links
  - Copy functionality
  - Streaming support

### 3. Search Results
- **File**: [components/search-results.tsx](mdc:components/search-results.tsx)
- **Purpose**: Displays search results in various formats
- **Layouts**:
  - List view
  - Card view
  - Compact view
- **Features**:
  - Favicon display
  - Snippet highlighting
  - Source attribution

### 4. Related Questions
- **File**: [components/related-questions.tsx](mdc:components/related-questions.tsx)
- **Purpose**: Suggests follow-up questions
- **Integration**: Can be generated by agents for research continuity

## Artifact System

### Overview
The artifact system allows agents to create interactive UI components dynamically.

### Artifact Viewer
- **File**: [components/artifact/artifact-viewer.tsx](mdc:components/artifact/artifact-viewer.tsx)
- **Purpose**: Renders agent-generated UI components
- **Supported Types**:
  - React components
  - Charts and visualizations
  - Interactive forms
  - Data tables

### Creating Artifacts
```typescript
// Agent can create artifacts like this
const artifact = {
  type: 'react-component',
  title: 'Data Visualization',
  content: `
    export default function DataViz({ data }) {
      return (
        <div className="p-4">
          {/* Component code */}
        </div>
      )
    }
  `
}
```

## Chat Components

### 1. Chat Interface
- **File**: [components/chat.tsx](mdc:components/chat.tsx)
- **Purpose**: Main chat interface for conversations
- **Features**:
  - Message history
  - Streaming responses
  - File attachments
  - Code highlighting

### 2. Message Component
- **File**: [components/message.tsx](mdc:components/message.tsx)
- **Purpose**: Individual message display
- **Variants**:
  - User messages
  - Assistant messages
  - System messages
  - Error messages

### 3. Chat Sidebar
- **File**: [components/sidebar/chat-sidebar.tsx](mdc:components/sidebar/chat-sidebar.tsx)
- **Purpose**: Chat history and navigation
- **Features**:
  - Conversation list
  - Search functionality
  - Folder organization

## UI Primitives

### Base Components (shadcn/ui)
Located in [components/ui/](mdc:components/ui):

- **Button**: Various styles and sizes
- **Card**: Content containers
- **Dialog**: Modal dialogs
- **Input**: Form inputs
- **Select**: Dropdown selections
- **Tabs**: Tabbed interfaces
- **Badge**: Status indicators
- **Skeleton**: Loading states

### Usage Example
```typescript
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

export function AgentCard({ title, content, onAction }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <p>{content}</p>
        <Button onClick={onAction}>Take Action</Button>
      </CardContent>
    </Card>
  )
}
```

## Agent-Specific Components

### 1. Agent Status
- **Purpose**: Shows agent thinking/processing state
- **Features**:
  - Thinking indicator
  - Action display
  - Progress tracking

### 2. Action Display
- **Purpose**: Shows what actions the agent is taking
- **Example**:
```typescript
<ActionDisplay
  action="Searching web"
  status="in-progress"
  details={{ query: "AI research papers", depth: "advanced" }}
/>
```

### 3. Memory Viewer
- **Purpose**: Displays agent's memory and context
- **Features**:
  - Working memory
  - Episodic memory
  - Context state

## Styling System

### Tailwind Configuration
- **File**: [tailwind.config.ts](mdc:tailwind.config.ts)
- **Theme**: Dark mode support, custom colors
- **Utilities**: Animation classes, responsive design

### CSS Variables
```css
/* In globals.css */
:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --primary: 222.2 47.4% 11.2%;
  /* ... more variables */
}
```

### Component Styling Pattern
```typescript
// Using cn() utility for conditional classes
import { cn } from '@/lib/utils'

<div className={cn(
  "base-classes",
  isActive && "active-classes",
  className
)} />
```

## Integration with Agents

### 1. Dynamic UI Generation
Agents can generate UI by:
- Creating artifacts with React components
- Using pre-built components with props
- Composing multiple components

### 2. Streaming UI Updates
```typescript
// Agent streams UI updates
onStreamUpdate={(update) => {
  if (update.type === 'ui-component') {
    setComponents(prev => [...prev, update.component])
  }
})
```

### 3. Interactive Elements
Agents can create interactive UIs that:
- Respond to user input
- Update based on data
- Trigger new agent actions

## Best Practices

1. **Component Composition**:
   - Use small, reusable components
   - Follow single responsibility principle
   - Maintain consistent prop interfaces

2. **Performance**:
   - Use React.memo for expensive components
   - Implement proper loading states
   - Optimize re-renders

3. **Accessibility**:
   - Use semantic HTML
   - Include ARIA labels
   - Ensure keyboard navigation

4. **Agent Integration**:
   - Design components to accept dynamic data
   - Handle streaming updates gracefully
   - Provide clear loading/error states

## Testing Components

```bash
# Run component tests
bun test components/

# Storybook for component development
bun run storybook
```

## Future Enhancements

- More artifact types (3D visualizations, diagrams)
- Enhanced agent UI generation capabilities
- Real-time collaborative editing
- Component marketplace for agents
- Advanced data visualization components
